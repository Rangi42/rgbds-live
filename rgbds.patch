diff --git a/include/asm/symbol.h b/include/asm/symbol.h
index 729ec28..310539a 100644
--- a/include/asm/symbol.h
+++ b/include/asm/symbol.h
@@ -114,6 +114,7 @@ void sym_ForEach(void (*func)(struct Symbol *, void *), void *arg);
 
 int32_t sym_GetValue(struct Symbol const *sym);
 void sym_SetExportAll(bool set);
+struct Symbol *sym_AddSecret();
 struct Symbol *sym_AddLocalLabel(char const *symName);
 struct Symbol *sym_AddLabel(char const *symName);
 struct Symbol *sym_AddAnonLabel(void);
diff --git a/src/asm/parser.y b/src/asm/parser.y
index 48afd9d..08363f1 100644
--- a/src/asm/parser.y
+++ b/src/asm/parser.y
@@ -676,7 +676,7 @@ endofline	: T_NEWLINE | T_EOB
 ;
 
 plain_directive	: label
-		| label cpu_command
+		| label { sym_AddSecret(); } cpu_command
 		| label macro
 		| label directive
 		| assignment_directive
diff --git a/src/asm/symbol.c b/src/asm/symbol.c
index 1c70b04..59059b1 100644
--- a/src/asm/symbol.c
+++ b/src/asm/symbol.c
@@ -381,6 +381,26 @@ static struct Symbol *createNonrelocSymbol(char const *symName, bool numeric)
 	return sym;
 }
 
+static uint32_t secret_counter = 0;
+struct Symbol *sym_AddSecret()
+{
+    struct Symbol *sym;
+    char name[MAXSYMLEN + 1];
+    secret_counter += 1;
+    sprintf(name, "__SEC_%x_%x_%s", secret_counter, lexer_GetLineNo(), fstk_GetFileName());
+
+    sym = createsymbol(name);
+	sym->type = SYM_LABEL;
+    sym->value = sect_GetSymbolOffset();
+    sym->isExported = true;
+
+	sym->section = sect_GetSymbolSection();
+
+	updateSymbolFilename(sym);
+    return sym;
+}
+
+
 /*
  * Add an equated symbol
  */
diff --git a/src/asm/warning.c b/src/asm/warning.c
index dc23386..2df07b0 100644
--- a/src/asm/warning.c
+++ b/src/asm/warning.c
@@ -222,7 +222,7 @@ void error(const char *fmt, ...)
 	va_list args;
 
 	va_start(args, fmt);
-	printDiag(fmt, args, "ERROR: ", ":\n    ", NULL);
+	printDiag(fmt, args, "ERROR: ", ": ", NULL);
 	va_end(args);
 	nbErrors++;
 }
@@ -232,7 +232,7 @@ _Noreturn void fatalerror(const char *fmt, ...)
 	va_list args;
 
 	va_start(args, fmt);
-	printDiag(fmt, args, "FATAL: ", ":\n    ", NULL);
+	printDiag(fmt, args, "FATAL: ", ": ", NULL);
 	va_end(args);
 
 	exit(1);
@@ -250,7 +250,7 @@ void warning(enum WarningID id, char const *fmt, ...)
 		return;
 
 	case WARNING_ERROR:
-		printDiag(fmt, args, "ERROR: ", ": [-Werror=%s]\n    ", flag);
+		printDiag(fmt, args, "ERROR: ", ": [-Werror=%s] ", flag);
 		va_end(args);
 		return;
 
@@ -262,7 +262,7 @@ void warning(enum WarningID id, char const *fmt, ...)
 		break;
 	}
 
-	printDiag(fmt, args, "warning: ", ": [-W%s]\n    ", flag);
+	printDiag(fmt, args, "warning: ", ": [-W%s] ", flag);
 
 	va_end(args);
 }
